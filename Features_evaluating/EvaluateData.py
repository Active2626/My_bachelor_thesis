"""
This class is parent class of ProcessLogs class.
There is stored a "connection_4_tuple" dicttionry, which contains all "connection 4-tuples" objects.
Next, there are function for creating data models. This data models are used for plotting figures.
"""


class EvaluateData(object):
    def __init__(self):
        self.connection_4_tuples = dict()
        self.header = "# Description: This file is for creating figure.\n" + \
                      "# This file is generated by program. Do not change the contain of file!.\n" + \
                      "#\n"

    def get_size_of_con4tuple(self):
        return len(self.connection_4_tuples)

    def create_plot_data(self):
        print "<< Evaluate.py: Creating plot data..."

        """
        Write here which data function you want to use.
        """
        # self.create_plot_data_file_1()
        self.create_plot_data_file_2()

        print "     << Evaluate.py: Plot data were succesfly created."

    """
    create_plot_data_file_1: flows x ssl
    - tuple_index
    - label
    - x = number of flows
    - y = number of ssl logs
    """
    def create_plot_data_file_1(self):
        with open("PlotData\\plot_data_1.txt", 'w') as f:
            f.write(self.header)
            f.write("# [srcIpAddress, dstIpAddress, dstPort, Protocol]<<<label<<<x<<<y \n")
            for key in self.connection_4_tuples.keys():
                label = self.connection_4_tuples[key].get_label_of_connection()
                x = self.connection_4_tuples[key].get_number_of_flows()
                y = self.connection_4_tuples[key].get_number_of_ssl_logs()
                f.write(str(key) + "<<<" + label + "<<<" + str(x) + "<<<" + str(y) + "\n")
        f.close()

    """
    create_plot_data_file_2: states_of_connection
    Normal states, malware states and their total numbers.
    states: S0, S1, SF, REJ, S2, S3, RSTO, RSTR, RSTOS0, RSTRH, SH, SHR, OTH,
    """
    def create_plot_data_file_2(self):
        normal_number_of_states = dict.fromkeys(["S0", "S1", "SF", "REJ", "S2", "S3", "RSTO", "RSTR", "RSTOS0", "RSTRH", "SH", "SHR", "OTH"], 0)
        malware_number_of_states = dict.fromkeys(["S0", "S1", "SF", "REJ", "S2", "S3", "RSTO", "RSTR", "RSTOS0", "RSTRH", "SH", "SHR", "OTH"], 0)
        for key in self.connection_4_tuples.keys():
            for state in self.connection_4_tuples[key].get_states_dict().keys():
                if self.connection_4_tuples[key].is_malware():
                    malware_number_of_states[state] += self.connection_4_tuples[key].get_states_dict()[state]

                else:
                    normal_number_of_states[state] += self.connection_4_tuples[key].get_states_dict()[state]

        with open("PlotData\\plot_data_2.txt", 'w') as f:
            f.write(self.header)
            f.write("# MALWARE:\n")
            for state in malware_number_of_states.keys():
                f.write(str(state) + ": " + str(malware_number_of_states[state]) + "\n")
            f.write("# NORMAL:\n")
            for state in normal_number_of_states.keys():
                f.write(str(state) + ": " + str(normal_number_of_states[state]) + "\n")
        f.close()

